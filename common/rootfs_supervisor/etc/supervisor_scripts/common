#!/bin/bash

set -e

VERSION_INFO=$(curl -s https://version.home-assistant.io/dev.json)
HA_ARCH=$(get_arch ha)
QEMU_ARCH=$(get_arch qemu)
DOCKER_TIMEOUT=30
DOCKER_PID=0
WD="${WORKSPACE_DIRECTORY:=/workspaces/supervisor}"

export SUPERVISOR_VERSION="$(echo ${VERSION_INFO} | jq -e -r '.supervisor')"
export SUPERVISOR_IMAGE="$(sed "s/{arch}/${HA_ARCH}/g" <<< "$(echo ${VERSION_INFO} | jq -e -r '.images.supervisor')")"


function start_docker() {
    local starttime
    local endtime

    if grep -q 'microsoft-standard\|standard-WSL' /proc/version; then
        # The docker daemon does not start when running WSL2 without adjusting iptables
        sudo update-alternatives --set iptables /usr/sbin/iptables-legacy || echo "Fails adjust iptables"
        sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy || echo "Fails adjust ip6tables"
    fi

    echo "Starting docker."
    if stat -f -c %T /var/lib/docker | grep -q overlayfs; then
        echo "Using \"vfs\" storage driver. Bind mount /var/lib/docker to use the faster overlay2 driver."
        sudo dockerd --storage-driver=vfs 2> /dev/null &
    else
        sudo dockerd --storage-driver=overlay2 2> /dev/null &
    fi
    DOCKER_PID=$!

    echo "Waiting for docker to initialize..."
    starttime="$(date +%s)"
    endtime="$(date +%s)"
    until docker info >/dev/null 2>&1; do
        if [[ $((endtime - starttime)) -le $DOCKER_TIMEOUT ]]; then
            sleep 1
            endtime=$(date +%s)
        else
            echo "Timeout while waiting for docker to come up"
            exit 1
        fi
    done
    echo "Docker was initialized"
}

function stop_docker() {
    local starttime
    local endtime

    echo "Stopping in container docker..."
    if [ "$DOCKER_PID" -gt 0 ] && kill -0 "$DOCKER_PID" 2> /dev/null; then
        starttime="$(date +%s)"
        endtime="$(date +%s)"

        # Now wait for it to die
        sudo kill "$DOCKER_PID"
        while kill -0 "$DOCKER_PID" 2> /dev/null; do
            if [[ $((endtime - starttime)) -le $DOCKER_TIMEOUT ]]; then
                sleep 1
                endtime=$(date +%s)
            else
                echo "Timeout while waiting for container docker to die"
                exit 1
            fi
        done
    else
        echo "Your host might have been left with unreleased resources"
    fi
}

function cleanup_lastboot() {
    if [[ -f /workspaces/test_supervisor/config.json ]]; then
        echo "Cleaning up last boot"
        sudo jq -rM 'del(.last_boot)' /workspaces/test_supervisor/config.json > /tmp/config.json
        sudo mv /tmp/config.json /workspaces/test_supervisor/config.json
    fi
}

function build_supervisor() {
    docker pull "ghcr.io/home-assistant/${HA_ARCH}-builder:dev"

    docker run --rm \
        --privileged \
        -v /run/docker.sock:/run/docker.sock \
        -v "$(pwd):/data" \
        "ghcr.io/home-assistant/${HA_ARCH}-builder:dev" \
            --generic latest \
            --target /data \
            --test \
            --amd64 \
            --no-cache
}

function cleanup_docker() {
    echo "Cleaning up stopped containers..."
    docker rm $(docker ps -a -q) || true
}

function run_supervisor() {
    sudo mkdir -p /tmp/supervisor_data
    sudo mkdir -p /workspaces/test_supervisor

    echo "Start Supervisor"
    docker run --rm --privileged \
        --name hassio_supervisor \
        --privileged \
        --security-opt seccomp=unconfined \
        --security-opt apparmor=unconfined \
        -v /run/docker.sock:/run/docker.sock:rw \
        -v /run/dbus:/run/dbus:ro \
        -v /run/udev:/run/udev:ro \
        -v "/workspaces/test_supervisor":/data:rw \
        -v /etc/machine-id:/etc/machine-id:ro \
        -v "${WD}:/usr/src/supervisor" \
        -e SUPERVISOR_SHARE="/workspaces/test_supervisor" \
        -e SUPERVISOR_NAME="hassio_supervisor" \
        -e SUPERVISOR_DEV=1 \
        -e SUPERVISOR_MACHINE="qemu${QEMU_ARCH}" \
        "${SUPERVISOR_IMAGE}:latest"
}

function init_dbus() {
    if pgrep dbus-daemon; then
        echo "Dbus is running"
        return 0
    fi

    echo "Startup dbus"
    sudo mkdir -p /var/lib/dbus
    sudo cp -f /etc/machine-id /var/lib/dbus/machine-id

    # cleanups
    sudo mkdir -p /run/dbus
    sudo rm -f /run/dbus/pid

    # run
    sudo dbus-daemon --system --print-address
}


function init_udev() {
    if pgrep systemd-udevd; then
        echo "udev is running"
        return 0
    fi

    echo "Startup udev"

    # cleanups
    sudo mkdir -p /run/udev

    # run
    sudo /lib/systemd/systemd-udevd --daemon
    sleep 3
    sudo udevadm trigger && sudo udevadm settle
}


function init_os_agent() {
    if pgrep os-agent; then
        echo "os-agent is running"
        return 0
    fi

    sudo os-agent &
}

